<!-- 

  ASPX-Macros in icebreak can be simple macros that just expands
  at compile time. But macros can also be REXX-scripts which are run at compile time.

  Using the simple macros:
  ________________________
  The IceBreak precompiler predefines the following REXX variables:

     $RETURNPARM          The name of the left side parameter used in function like macros: x=MyMacro().  here $RETURNPARM will be "X"
     $PARM01 to$ PARM99   The parameter from the macros e.g.:  MyMacro(Customer,Item)  $PARM01 is "Customer" and $PARM02 is "Item" 
     $STMTNO              The Asp-Source statement where the macro was found            
     $FILENAME            The Asp-Source filename 

  Using script macros:
  ____________________
  
  
  Script Macros are expanded into the ASPX-source by using "expand" IceBreak-REXX-buildinfunction.

  The IceBreak precompiler predefines the following REXX variables:

     RETURNPARM            The name of the left side parameter used in function like macros: x=MyMacro().  here RETURNPARM will be "X"
     PARM01 to PARM99      The parameter from the macros e.g.:  MyMacro(Customer,Item)  PARM01 is "Customer" and PARM02 is "Item" 
     STMTNO                The Asp-Source statement where the macro was found            
     FILENAME              The Asp-Source filename 
       
  When using if/ while  comparison alwas embed the script in CDATA tags to avoid XML misinterpetation.

  Syntax:
  _______
  
  The generig syntax of the macro is:

      returnparm = macroname(parm01, parm02 , parm03 ... parm99); 

  where ";" is the macroidentifier


  Macros are NOT case sensitive.

  All programing languages has a seperate pool of macros, however SQL versions 
  of the language shares the same pool as theire host language
  
  A  "Macroidentifier" can be specific for each language.

  The "Macroidentifier" must be one char that is unique and not used in the language context.
  
  Build-in macros are product wide and can be coded in any ILE language. They have to be registered by icebreak.org.

--> 
<MacroDefinition>
  <language type="RPGLE" MacroIdentifier="." ParameterMarker="$">

    <macro name="var" type="buildin">
    </macro>

    <macro name="SmallScriptMacro" type="script"><![CDATA[
          expand( RETURNPARM '=' PARM01 '+' PARM02);
    ]]></macro>

  </language>

  <language type="CBLLE" MacroIdentifier=";" ParameterMarker="$"> 

    <macro name="Request.Form" type="simple">
     call procedure "Request_Form" using
          reference  $RETURNPARM
          content    $PARM01          
     end-call
    </macro>
       
    <macro name="Request.FormNum" type="simple">
     call procedure "Request_FormNum" using
          reference  IcebreakFloat
          content    $PARM01
     end-call
     move IcebreakFloat to $RETURNPARM                             
    </macro>

    <macro name="Request.QueryString" type="simple">
     call procedure "Request_QueryString" using
          reference  $RETURNPARM
          content    $PARM01          
     end-call
    </macro>
       
    <macro name="Request.QueryStringNum" type="simple">
     call procedure "Request_QueryStringNum" using
          reference  IcebreakFloat
          content    $PARM01
     end-call
     move IcebreakFloat to $RETURNPARM                             
    </macro>

    <macro name="Response.Include" type="simple">
     call procedure "Response_Include" using
          reference  $RETURNPARM
          content    $PARM01          
     end-call
    </macro>
 
    <macro name="Response.IncludeTag" type="simple">
     call procedure "Response_IncludeTag" using
          content    $PARM01          
          content    $PARM02          
     end-call
    </macro>

    <macro name="Response.WriteTag" type="simple">
     call procedure "Response_IncludeTag" using
          content    $PARM01          
          content    $PARM02          
     end-call
    </macro>

    <macro name="Response.SetNoHeader" type="simple">
     call procedure "SetNoHeader"     
     end-call
    </macro>

    <macro name="Response.Write" type="simple">
     call procedure "Response_Write" using
        content    $PARM01          
     end-call
    </macro>

    <macro name="Response.SetCharset" type="simple">
     move $PARM01 to IceBreakVarCharString
     move 16      to IceBreakVarCharLen
     call procedure "SetCharset" using
        IceBreakVarChar     
     end-call
    </macro>

    <macro name="Response.SetMarker" type="simple">
     call procedure "Response_SetMarker" using
          content    $PARM01          
          content    $PARM02          
     end-call
    </macro>

    <macro name="Response.ParseMarker" type="simple">
     call procedure "ParseMarker" 
     end-call
    </macro>


  </language>

  <language type="DEMO" MacroIdentifier=";" ParameterMarker="$"> 
  <!-- implementing the formnum as a script - this has however some performance overhead -->     
    <macro name="formnum" type="script">
      expand('     call procedure "Request_FormNum" using');
      expand('          reference  IcebreakFloat');
      expand('          content    ' PARM01);            
      expand('     end-call');                             
      expand('     move IcebreakFloat to ' RETURNPARM);                             
    </macro>
  </language>
</MacroDefinition>

